#!/usr/bin/env ruby

require 'curb'
require 'fileutils'
require 'nokogiri'
require 'pathname'
require 'yaml'

env = ENV['RAILS_ENV'] || 'development'

conf = File.expand_path('../../config/application.yml', __FILE__)
@settings = YAML.load(File.open(conf).read)[env]

def proquest_directory
  File.join(@settings['download_root'], 'proquest')
end

def marc_directory
  File.join(@settings['download_root'], 'marc')
end

def pegasus_path
  @settings['pegasus_sru_endpoint']
end

Dir.mkdir @settings['download_root'] unless Pathname.new(@settings['download_root']).exist?
Dir.mkdir marc_directory unless Pathname.new(marc_directory).exist?
Dir.mkdir proquest_directory unless Pathname.new(proquest_directory).exist?

# @param [String] zipfile The path to the .zip file
#
# @return [Array]
def unzip(zipfile, dest)
  FileUtils.cp zipfile, proquest_directory

  xml ||= []
  system 'unzip', '-o', zipfile, '-d', dest

  Dir.chdir dest do
    Dir.glob("#{dest}/**/*.xml") do |x|
      puts "Found #{x}"
      xml << x
    end
  end

  xml
end

temp = File.join(@settings['download_root'], "#{Time.now.to_i}")
Dir.mkdir temp

@xml = []

ARGV.each do |f|
  @xml << unzip(f, temp)
end

marcs = []
@xml.flatten.uniq.each do |x|
  binary_filename = Nokogiri::XML(File.open(x)).css('DISS_binary').children.first.to_s

  search = Curl::Easy.perform("http://pegasus.library.ucsb.edu:5661/sba01pub?version=1.1&operation=searchRetrieve&maximumRecords=1&startRecord=1&query=(marc.947.a=pqd%20and%20marc.956.f=#{binary_filename})")

  if !search.body_str.include?('zs:numberOfRecords>1')
    puts "Error: failed to retrieve record for #{binary_filename}"
  else
    entry = search.body_str.sub("<?xml version=\"1.0\"?>\n<zs:searchRetrieveResponse xmlns:zs=\"http://www.loc.gov/zing/srw/\"><zs:version>1.1</zs:version><zs:numberOfRecords>1</zs:numberOfRecords><zs:records>", '')
    entry.sub!('</zs:records></zs:searchRetrieveResponse>', '')

    marcs << entry
  end
end

puts "Copied zipfiles to #{proquest_directory}"

output_file = "MARC_#{Time.now.to_i}.xml"
File.open(File.join(marc_directory, output_file), 'w') do |f|
  f.write <<-EOS
<?xml version="1.0"?>
<zs:searchRetrieveResponse xmlns:zs="http://www.loc.gov/zing/srw/"><zs:version>1.1</zs:version><zs:numberOfRecords>#{marcs.count}</zs:numberOfRecords><zs:records>
EOS
  f.write marcs.join("\n")
  f.write('</zs:records></zs:searchRetrieveResponse>')

  puts "Wrote MARC metadata to #{marc_directory}/"
end

puts 'Now ingesting...'
sleep 5

begin
  pid = fork do
    exec File.expand_path('../traject-xml', __FILE__), "#{marc_directory}/#{output_file}"
  end
ensure
  Process.wait pid
  FileUtils.rm_rf temp
end
