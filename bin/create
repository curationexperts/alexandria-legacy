#!/usr/bin/env bash

mkpasswd() {
  openssl rand 50 | shasum -a "$1" | tr -d '\- \n'
}

SECRET="$(mkpasswd 512)"
export SECRET="$SECRET"

PG_PASS="$(mkpasswd 256)"
export PG_PASS="$PG_PASS"

H_PG_PASS="$(mkpasswd 256)"
export H_PG_PASS="$H_PG_PASS"

M_PG_PASS="$(mkpasswd 256)"
export M_PG_PASS="$M_PG_PASS"

FEDORA_PASS="$(mkpasswd 256)"
export FEDORA_PASS="$FEDORA_PASS"

ANSIBLE_CONFIG="$(pwd)/provisioning/ansible.cfg"
export ANSIBLE_CONFIG

if [ "$1" != "" ]; then
  echo "Setting RAILS_ENV to $1"
  export RAILS_ENV="$1"
fi

if [ "$PORT" == "" ]; then
  port=${PORT:-"2222"}
  if [ "$RAILS_ENV" == "production" ]; then
    echo -n "Use PORT (default '22'): "
    read -r port
    port=${port:-"22"}
  fi
  echo "Setting PORT to '$port'"
  export PORT="$port"
fi

if [ "$REMOTE_USER" == "" ]; then
  remote_user=${REMOTE_USER:-"vagrant"}
  if [ "$RAILS_ENV" == "production" ]; then
    echo -n "Set REMOTE_USER (default 'root'): "
    read -r remote_user
    remote_user=${remote_user:-"root"}
  fi
  echo "Setting REMOTE_USER to '$remote_user'"
  export REMOTE_USER="$remote_user"
fi

if [ "$IDENTITY" == "" ] && [ "$RAILS_ENV" == "production" ]; then
  echo -n "Specify path to identity file (default ~/.ssh/id_rsa): "
  read -r identity
  IDENTITY=${identity:-"$HOME/.ssh/id_rsa"}
fi

if [ "$SERVER" == "" ]; then
  server=${SERVER:-"127.0.0.1"}
  if [ "$RAILS_ENV" == "production" ]; then
    echo -n "Set SERVER: "
    read -r server
  fi
  echo "Setting SERVER to '$server'"
  export SERVER="$server"
fi

if [ "$LDAP_PASS" == "" ]; then
  echo
  echo -n "Enter password for the LDAP server: "
  read -r -s ldap_pass
  export LDAP_PASS="$ldap_pass"
fi

if [ "$EZID_USER" == "" ]; then
  echo
  echo -n "Enter Ezid username: "
  read -r ezid_user
  echo "Setting EZID_USER to '$ezid_user'"
  export EZID_USER="$ezid_user"
fi

if [ "$EZID_PASS" == "" ]; then
  echo -n "Enter password for Ezid: "
  read -r -s ezid_pass
  export EZID_PASS="$ezid_pass"
  echo
fi

if [ "$RAILS_ENV" == "production" ]; then
  if [ "$EZID_SHOULDER" == "" ]; then
    echo -n "Enter shoulder for Ezid: "
    read -r ezid_shoulder
    echo "Setting EZID_SHOULDER to '$ezid_shoulder'"
    export EZID_SHOULDER="$ezid_shoulder"
    echo
  fi
fi

run_cmd() {
  local cmd
  cmd="$*"
  echo "$(tput bold)==> $*$(tput sgr0)"
  eval "$cmd"

  exit_code=$?

  if [ "$exit_code" != "0" ]; then
    echo "$(tput setaf 124)Failed ($exit_code):$(tput sgr0) $cmd"
    exit $exit_code
  fi
}

write_hosts() {
  cat <<EOF
[adrl-hosts]
alex2 ansible_ssh_port=$PORT ansible_ssh_host=$SERVER
EOF
}

write_conf() {
cat <<EOF
[defaults]
private_key_file=$IDENTITY
host_key_checking = False
control_path = %(directory)s/%%h-%%r
inventory = $(pwd)/provisioning/hosts

[ssh_connection]
scp_if_ssh=True
EOF
}

if [ "$RAILS_ENV" == "development" ]; then
  run_cmd "vagrant up"

  echo "Provisioning complete."
  echo 'Run `make vagrant` to deploy with Capistrano.'
  echo
  echo "After the first deploy, restart Tomcat:"
  echo "  ssh -i $(pwd)/.vagrant/machines/default/virtualbox/private_key -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -o StrictHostKeyChecking=no $REMOTE_USER@$SERVER -p $PORT 'sudo /usr/sbin/service tomcat restart'"

elif [ "$RAILS_ENV" == "production" ]; then
  write_hosts > provisioning/hosts
  write_conf > provisioning/ansible.cfg
  run_cmd "ansible-playbook provisioning/adrl.yml -u $REMOTE_USER"

  echo "Provisioning complete."
  echo
  echo "Add deploy@$SERVER:~/.ssh/id_rsa.pub to your repository's authorized keys."
  echo
  echo 'Run `make prod` to deploy with Capistrano.'
  echo
  echo "After the first deploy, restart Tomcat:"
  echo "  ssh -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -o StrictHostKeyChecking=no $REMOTE_USER@$SERVER -p $PORT 'sudo /usr/sbin/service tomcat restart'"
fi
