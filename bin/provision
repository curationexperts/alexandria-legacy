#!/usr/bin/env bash

if [[ "$1" != "local" &&
        "$1" != "vagrant" &&
        "$1" != "development" &&
        "$1" != "production" ]]; then
  echo "$(tput setaf 124)Bad argument:$(tput sgr0) $1"
  echo "Usage: bin/create <development|production>"
  exit 1
fi

#
# Functions
#

# @param [String] The hash length (256, 512, etc.)
mkpasswd() {
  openssl rand -base64 64 | shasum -a "$1" | tr -d '\n\ -'
}

# Pretty-prints and runs a command, exiting when there's non-zero output
run_cmd() {
  local cmd
  cmd="$*"
  echo "$(tput bold)==> $*$(tput sgr0)"
  eval "$cmd"

  export EXIT_STATUS=$?

  if [ "$EXIT_STATUS" != "0" ]; then
    echo "$(tput setaf 124)Failed ($EXIT_STATUS):$(tput sgr0) $cmd"
  fi
}

# Write the configuration variables so Ansible can be re-run on failure
write_savepoint() {
  cat <<EOF
#!/bin/bash
export EMAIL='$EMAIL'
export FEDORA_PASS='$FEDORA_PASS'
export H_PG_PASS='$H_PG_PASS'
export IDENTITY='$IDENTITY'
export M_PG_PASS='$M_PG_PASS'
export PG_PASS='$PG_PASS'
export PORT='$PORT'
export REMOTE_GROUP='$REMOTE_GROUP'
export REMOTE_USER='$REMOTE_USER'
export SECRET='$SECRET'
export SERVER='$SERVER'
export SOLR_HOME='$SOLR_HOME'
export SUDO_FLAG='$SUDO_FLAG'
EOF
}

write_hosts() {
  cat <<EOF
[default]
default ansible_ssh_port=$PORT ansible_ssh_host=$SERVER
EOF
}

# http://docs.ansible.com/ansible/faq.html#how-do-i-handle-python-pathing-not-having-a-python-2-x-in-usr-bin-python-on-a-remote-machine
write_hosts_local() {
  cat <<EOF
[default]
default ansible_python_interpreter=/usr/local/bin/python
EOF
}

write_conf() {
cat <<EOF
[defaults]
private_key_file = $IDENTITY
host_key_checking = False
control_path = %(directory)s/%%h-%%r
inventory = $(pwd)/hosts

[ssh_connection]
scp_if_ssh=True
EOF
}

NOW="$(date "+%Y-%m-%d-%H%M%S")"
export NOW

# If they pass a config file from a previous try, source it and don't
# prompt them for new parameters
if [ -f "$2" ]; then
  # shellcheck source=/dev/null
  . "$2"
else
  #
  # Set variables
  #
  # These variables are stored in secrets.yml, so we can SSH and check
  # them if need be.
  #
  # FIXME: store them in Secret Server and fetch via the API at run-time
  SECRET="$(mkpasswd 512)"
  export SECRET

  FEDORA_PASS="$(mkpasswd 256)"
  export FEDORA_PASS

  PG_PASS="$(mkpasswd 256)"
  export PG_PASS
  H_PG_PASS="$(mkpasswd 256)"
  export H_PG_PASS
  M_PG_PASS="$(mkpasswd 256)"
  export M_PG_PASS

  ANSIBLE_CONFIG="$(pwd)/ansible.cfg"
  export ANSIBLE_CONFIG

  if [ "$1" == "production" ]; then
    echo -n "Set REMOTE_USER (default 'root'): "
    read -r REMOTE_USER
    REMOTE_USER=${REMOTE_USER:-"root"}
    REMOTE_GROUP="$REMOTE_USER"
  elif [[ "$1" == "local" ]]; then
    REMOTE_USER="$USER"
    REMOTE_GROUP=admin
  else
    REMOTE_USER=vagrant
    REMOTE_GROUP=vagrant
  fi
  echo "Setting REMOTE_USER to '$REMOTE_USER'"
  export REMOTE_USER
  export REMOTE_GROUP

  export IDENTITY="$HOME/.ssh/id_rsa"

  if [ "$1" == "production" ]; then
    echo -n "Prompt for sudo password? [Y/n]: "
    read -r sudopass
    sudopass=${sudopass:-"n"}
    if [ "$sudopass" == "Y" ] || [ "$sudopass" == "y" ]; then
      export SUDO_FLAG=" -K"
    fi
  fi

  SERVER=${SERVER:-"localhost"}
  if [ "$1" == "production" ]; then
    echo -n "Set SERVER: "
    read -r SERVER
  fi
  echo "Setting SERVER to '$SERVER'"
  export SERVER

  if [[ "$1" == "production" ]]; then
    EMAIL=adrl@library.ucsb.edu
  else
    EMAIL=$(git config --get user.email | tr -d '\n')
  fi
  echo "Setting EMAIL to '$EMAIL'"
  export EMAIL

  write_savepoint > "$1$NOW.log"
  chmod 600 "$1$NOW.log"
fi

if [ "$1" == "production" ]; then
  write_hosts > hosts
  write_conf > ansible.cfg

  run_cmd "ansible-playbook ansible/adrl.yml -vv -u $REMOTE_USER -e @ansible/prod_vars.yml"
  if [ "$EXIT_STATUS" == "0" ]; then
    rm -f $1*.log
    echo "Provisioning complete."
    echo
    echo "Run \`SERVER=$SERVER make prod\` to deploy with Capistrano."
  else
    echo "$(tput bold)==> Configuration saved to $1$NOW.log$(tput sgr0)"
    echo 'Re-run with `bin/create production'" $1$NOW.log"'`'", or delete it NOW."
  fi

elif [ "$1" == "vagrant" ] || [ "$1" == "development" ]; then

  if [[ -e ".vagrant/machines/default/virtualbox/id" ]]; then
    run_cmd "vagrant provision"
  else
    run_cmd "vagrant up"
  fi

  if [ "$EXIT_STATUS" == "0" ]; then
    rm -f $1*.log
    echo "Provisioning complete."
    echo
    echo "Run \`make vagrant\` to deploy with Capistrano."
    echo
  else
    echo "$(tput bold)==> Configuration saved to $1$NOW.log$(tput sgr0)"
    echo 'Re-run with `bin/create development'" $1$NOW.log"'`'", or delete it NOW."
  fi
else
  write_hosts_local > hosts
  write_conf > ansible.cfg

  run_cmd "ansible-playbook provisioning/osx/adrl.yml -vv --connection=local --ask-vault-pass -e @ansible/dev_vars.yml"

  if [ "$EXIT_STATUS" == "0" ]; then
    rm -f $1-*.log
    echo "Provisioning complete."
    echo
    echo "1. Run \`tomcat/bin/catalina start\` to start Tomcat."
    echo "2. Run \`bundle exec rake db:migrate\`."
    echo "3. Run \`bin/rails server\` to start WEBRick."
  else
    echo "$(tput bold)==> Configuration saved to $1$NOW.log$(tput sgr0)"
    echo "Re-run with \`bin/create local $1$NOW.log\`, or delete it NOW."
  fi
fi
